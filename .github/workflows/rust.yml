name: Test, Upload Coverage and Release Rust

on:
  push:
    branches: [ main, pgo, csharp-bindings, cli ]
    tags:
      - '*'
  pull_request:
    branches: [ main, pgo, csharp-bindings, cli ]
  workflow_dispatch:

jobs:
  build-and-test:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-pgo: true
            use-cross: false
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            use-pgo: true
            use-cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use-pgo: false # no native runner
            use-cross: true
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            use-pgo: false # no native runner
            use-cross: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use-pgo: true
            use-cross: false
          - os: windows-latest
            target: i686-pc-windows-msvc
            use-pgo: true
            use-cross: false
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            use-pgo: false # no native runner
            use-cross: false
          - os: macos-13 # x86
            target: x86_64-apple-darwin
            use-pgo: true
            use-cross: false
          - os: macos-14 # M1
            target: aarch64-apple-darwin
            use-pgo: true
            use-cross: false
  
    runs-on: ${{ matrix.os }}
  
    steps:
      - uses: actions/checkout@v4
  
      - name: Build C Libraries and Run Tests
        uses: Reloaded-Project/devops-rust-lightweight-binary@v1
        with:
          crate-name: prs-rs
          target: ${{ matrix.target }}
          use-pgo: ${{ matrix.use-pgo }}
          use-cross: ${{ matrix.use-cross }}
          features: "c-exports"
          build-library: true
          run-tests-and-coverage: true
          codecov-token: ${{ secrets.CODECOV_TOKEN }}

      - name: Build CLI Tool
        uses: Reloaded-Project/devops-rust-lightweight-binary@v1 # upgrade if needed
        with:
          target: ${{ matrix.target }}
          use-pgo: ${{ matrix.use-pgo }}
          use-cross: ${{ matrix.use-cross }}
          rust-project-path: "tools/cli/"
          crate-name: "prs-rs-cli"

  build-c-headers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Generate C++ bindings
        uses: Reloaded-Project/devops-rust-cbindgen@v1
        with:
          config-file: cbindgen_cpp.toml
          output-header-file: bindings_cpp.hpp
  
      - name: Generate C bindings 
        uses: Reloaded-Project/devops-rust-cbindgen@v1
        with:
          config-file: cbindgen_c.toml 
          output-header-file: bindings_c.h

  build-dotnet-library:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build and Package .NET Wrapper
        uses: Reloaded-Project/devops-rust-c-library-to-dotnet@v1
        with:
          csharp-project-path: bindings/csharp

  publish-crate:
    permissions:
      contents: write

    needs: [build-and-test,build-c-headers,build-dotnet-library]
    # Publish only on tags
    if: startsWith(github.ref, 'refs/tags/') 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: ↙️ Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Upload to NuGet
        shell: pwsh
        run: |
          $items = Get-ChildItem -Path "artifacts/**.nupkg" -Recurse
          Foreach ($item in $items)
          {
              Write-Host "Pushing $item"
              dotnet nuget push "$item" -k "${{ secrets.NUGET_KEY }}" -s "https://api.nuget.org/v3/index.json" --skip-duplicate
          }

          $items = Get-ChildItem -Path "artifacts/**.snupkg" -Recurse
          Foreach ($item in $items)
          {
              Write-Host "Pushing Symbol Package $item"
              dotnet nuget push "$item" -k "${{ secrets.NUGET_KEY }}" -s "https://api.nuget.org/v3/index.json" --skip-duplicate
          }

      - name: Compress Artifacts
        shell: bash
        run: |
          dir="artifacts"
          if [ ! -d "$dir" ]; then
            echo "Directory $dir does not exist. No artifacts found."
            exit 0
          fi

          for subdir in "$dir"/*; do
            if [ -d "$subdir" ]; then
              base=$(basename "$subdir")
              zip -r "$dir/$base.zip" "$subdir"
              rm -r "$subdir"
            fi
          done
          ls -A ./artifacts

      - name: GitHub Release Artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*

      - name: Publish to crates.io
        uses: Reloaded-Project/reloaded-project-configurations-rust/.github/actions/publish-crate@v1
        with:
          token: ${{ secrets.CRATES_IO_TOKEN }}