name: Test, Upload Coverage and Release Rust

on:
  push:
    branches: [main, pgo, csharp-bindings, cli]
    tags:
      - "*"
  pull_request:
    branches: [main, pgo, csharp-bindings, cli]
  workflow_dispatch:

jobs:
  build-and-test:
    strategy:
      matrix:
        include:
          # Standard Targets
          - {os: ubuntu-latest, target: x86_64-unknown-linux-gnu, use-pgo: true, use-cross: false}
          - {os: ubuntu-latest, target: aarch64-unknown-linux-gnu, use-pgo: false, use-cross: true}
          - {os: windows-latest, target: x86_64-pc-windows-msvc, use-pgo: true, use-cross: false}
          - {os: windows-latest, target: i686-pc-windows-msvc, use-pgo: true, use-cross: false}
          - {os: macos-15-intel, target: x86_64-apple-darwin, use-pgo: true, use-cross: false}
          - {os: macos-latest, target: aarch64-apple-darwin, use-pgo: true, use-cross: false}
          
          # Obscure Targets
          - {os: ubuntu-latest, target: armv7-unknown-linux-gnueabihf, use-pgo: false, use-cross: true}
          - {os: ubuntu-latest, target: i686-unknown-linux-gnu, use-pgo: true, use-cross: false}
          - {os: windows-latest, target: aarch64-pc-windows-msvc, use-pgo: false, use-cross: false}

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Build C Libraries and Run Tests
        uses: Reloaded-Project/devops-rust-lightweight-binary@v1
        with:
          crate-name: prs-rs
          target: ${{ matrix.target }}
          use-pgo: ${{ matrix.use-pgo }}
          use-cross: ${{ matrix.use-cross }}
          features: "c-exports"
          build-library: true
          run-tests-and-coverage: ${{ matrix.target != 'aarch64-pc-windows-msvc' }}
          codecov-token: ${{ secrets.CODECOV_TOKEN }}
          use-cache: true

      - name: Build CLI Tool
        uses: Reloaded-Project/devops-rust-lightweight-binary@v1 # upgrade if needed
        with:
          target: ${{ matrix.target }}
          use-pgo: ${{ matrix.use-pgo }}
          use-cross: ${{ matrix.use-cross }}
          rust-project-path: "tools/cli/"
          crate-name: "prs-rs-cli"
          use-cache: false # cache is inherited from above job.
          install-binstall: false # inherited from above job.

      # Note: The GitHub Runner Images will contain an up to date Rust Stable Toolchain
      #       thus as per recommendation of cargo-semver-checks, we're using stable here.
      - name: Run cargo-semver-checks
        if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/tags/')
        run: |
          # Run semver checks on stable, because nightly sometimes gets borked in cargo-semver-checks.
          rustup +stable target add ${{ matrix.target }}
          # Note: binstall is available after devops-rust-lightweight-binary call.
          cargo binstall --no-confirm cargo-semver-checks
          cargo +stable semver-checks --target ${{ matrix.target }} --features "c-exports"

      - name: Build documentation
        if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/tags/')
        run: cargo +nightly doc --no-deps --target ${{ matrix.target }} --features "c-exports"

  build-c-headers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Generate C++ bindings
        uses: Reloaded-Project/devops-rust-cbindgen@v1
        with:
          config-file: cbindgen_cpp.toml
          output-header-file: bindings_cpp.hpp
          use-cache: "true"

      - name: Generate C bindings
        uses: Reloaded-Project/devops-rust-cbindgen@v1
        with:
          config-file: cbindgen_c.toml
          output-header-file: bindings_c.h
          use-cache: "false" # Cache inherited from above call.

  build-dotnet-library:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build and Package .NET Wrapper
        uses: Reloaded-Project/devops-rust-c-library-to-dotnet@v1
        with:
          csharp-project-path: bindings/csharp

  test-release-builds:
    strategy:
      matrix:
        include:
          - {os: ubuntu-latest, target: x86_64-unknown-linux-gnu}
          - {os: windows-latest, target: x86_64-pc-windows-msvc}
          - {os: macos-latest, target: aarch64-apple-darwin}

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Test Release Build
        uses: Reloaded-Project/devops-rust-test-and-coverage@v1
        with:
          target: ${{ matrix.target }}
          features: "c-exports"
          additional-test-args: "--release"
          codecov-token: ${{ secrets.CODECOV_TOKEN }}
          setup-rust-cache: true

  publish-crate:
    permissions:
      contents: write

    needs: [build-and-test, build-c-headers, build-dotnet-library, test-release-builds]
    # Publish only on tags
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Test Publish Action
        uses: Reloaded-Project/devops-publish-action@v1
        with:
          crates-io-token: ${{ secrets.CRATES_IO_TOKEN }}
          nuget-api-key: ${{ secrets.NUGET_KEY }}
          artifacts-directory: "artifacts"
